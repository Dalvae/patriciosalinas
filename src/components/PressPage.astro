---
import type { Page } from "../types/types";
import ProtectedImage from "./ui/ReactProtrectedImage";
import { parse, HTMLElement, Node, NodeType } from "node-html-parser";
import "../styles/wordpress-styles.css";

interface Props {
  page: Page;
}

interface ImageInfo {
  src: string;
  alt: string;
  width?: string;
  height?: string;
  caption?: string;
  className?: string;
}

interface MediaTextContent {
  imageInfo: ImageInfo;
  text: string;
  link: string;
}

const { page } = Astro.props;
const title = page.title;
const content = page.content || "";
const root = parse(content);
const allImages: ImageInfo[] = [];

function processNode(
  node: Node
): Array<{ type: "html" | "image" | "media-text"; content: any }> {
  if (node.nodeType === NodeType.ELEMENT_NODE) {
    const element = node as HTMLElement;

    if (element.classList.contains("wp-block-media-text")) {
      const figure = element.querySelector(".wp-block-media-text__media");
      const content = element.querySelector(".wp-block-media-text__content");

      if (figure && content) {
        const img = figure.querySelector("img");
        const link = figure.querySelector("a");
        const text = content.text.trim();

        if (img) {
          const imageInfo: ImageInfo = {
            src: img.getAttribute("src") || "",
            alt: img.getAttribute("alt") || "",
            width: img.getAttribute("width") || undefined,
            height: img.getAttribute("height") || undefined,
            className: img.getAttribute("class") || undefined,
          };
          allImages.push(imageInfo);

          return [
            {
              type: "media-text",
              content: {
                imageInfo,
                text,
                link: link?.getAttribute("href") || "",
              } as MediaTextContent,
            },
          ];
        }
      }
    }

    if (
      element.tagName === "FIGURE" &&
      element.getAttribute("class")?.includes("wp-block-image")
    ) {
      const img = element.querySelector("img");
      const caption = element.querySelector("figcaption");
      if (img) {
        const imageInfo: ImageInfo = {
          src: img.getAttribute("src") || "",
          alt: img.getAttribute("alt") || "",
          width: img.getAttribute("width") || undefined,
          height: img.getAttribute("height") || undefined,
          caption: caption ? caption.innerHTML : undefined,
          className: element.getAttribute("class") || undefined,
        };
        allImages.push(imageInfo);
        return [
          {
            type: "image",
            content: imageInfo,
          },
        ];
      }
    }

    const childResults = element.childNodes.flatMap(processNode);
    const openTag = element.toString().split(">")[0] + ">";
    const closeTag = `</${element.tagName.toLowerCase()}>`;
    return [
      { type: "html", content: openTag },
      ...childResults,
      { type: "html", content: closeTag },
    ];
  } else if (node.nodeType === NodeType.TEXT_NODE) {
    return [{ type: "html", content: node.text }];
  }
  return [];
}

const processedContent = root.childNodes.flatMap(processNode);
---

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
  <article class="wp-blocks prose max-w-none p-2">
    <h1 class="py-5 text-center font-semibold">{title}</h1>
    <div class="bg-white pt-5 mb-10">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          processedContent.map((item) => {
            if (item.type === "html") {
              return <Fragment set:html={item.content} />;
            } else if (item.type === "image") {
              return (
                <figure class={item.content.className}>
                  <ProtectedImage
                    client:load
                    src={item.content.src}
                    alt={item.content.alt}
                    width={item.content.width}
                    height={item.content.height}
                    allImages={allImages}
                    caption={item.content.caption}
                  />
                </figure>
              );
            } else if (item.type === "media-text") {
              const { imageInfo, text, link } =
                item.content as MediaTextContent;
              return (
                <div class="card-container h-[420px]">
                  <a href={link} class="block no-underline text-inherit h-full">
                    <div class="card bg-white rounded-lg overflow-hidden shadow-md transition-all duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1 hover:scale-[1.02] flex flex-col h-full">
                      <div class="card-image overflow-hidden flex-grow relative m-5">
                        <img
                          src={imageInfo.src}
                          alt={imageInfo.alt}
                          class="absolute inset-0 w-full h-auto object-contain object-top not-prose scale-[1.01]"
                        />
                      </div>
                      <div class="card-content p-5 flex-shrink-0">
                        <p class="text-gray-800 text-center line-clamp-3">
                          {text}
                        </p>
                      </div>
                    </div>
                  </a>
                </div>
              );
            }
          })
        }
      </div>
    </div>
  </article>
</div>

<style>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer utilities {
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  }

  /* Remove underline from all links within the article */
  .wp-blocks a {
    text-decoration: none;
  }
</style>
