---
import type { Page } from "../types/types";
import ProtectedImage from "./ui/ProtectedImage.astro";
import { JSDOM } from "jsdom";

interface Props {
  page: Page;
  isHomePage: boolean;
}

const { page, isHomePage } = Astro.props;
const title = page.title;
const content = page.content || "";

function parseContent(content: string) {
  const dom = new JSDOM(content);
  const doc = dom.window.document;
  return Array.from(doc.body.children);
}

type ComponentMapping =
  | {
      component: typeof ProtectedImage;
      props: { src: string; alt: string; width?: string; height?: string };
    }
  | { component: null; props: { content: string } };

function mapElementToComponent(element: Element): ComponentMapping {
  switch (element.tagName.toLowerCase()) {
    case "img":
      return {
        component: ProtectedImage,
        props: {
          src: element.getAttribute("src") || "",
          alt: element.getAttribute("alt") || "",
          width: element.getAttribute("width") || "100%",
          height: element.getAttribute("height") || "auto",
        },
      };
    default:
      return { component: null, props: { content: element.outerHTML } };
  }
}

const contentElements = parseContent(content);
---

<div class="mx-auto max-w-5xl">
  <article class="wp-blocks prose max-w-none">
    {!isHomePage && <h1>{title}</h1>}
    {
      contentElements.map((element) => {
        const { component: Component, props } = mapElementToComponent(element);
        return Component ? (
          <Component {...props} />
        ) : (
          <Fragment set:html={props.content} />
        );
      })
    }
  </article>
</div>
