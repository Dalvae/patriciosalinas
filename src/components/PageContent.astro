---
import type { Page } from "../types/types";
import Gallery from "./ui/Gallery.astro";
import ImageBlock from "./ui/ImageBlock.astro";
import { JSDOM } from "jsdom";

interface Props {
  page: Page;
}

const { page } = Astro.props;
const title = page.title;
const content = page.content || "";

function parseContent(content: string) {
  const dom = new JSDOM(content);
  const doc = dom.window.document;
  return Array.from(doc.body.children);
}

type ComponentMapping =
  | {
      component: any;
      props: { content: string };
    }
  | {
      component: null;
      props: { content: string };
    };

function mapElementToComponent(element: Element): ComponentMapping {
  switch (element.tagName.toLowerCase()) {
    case "div":
      if (
        (element.classList.contains("wp-block-gallery") &&
          element.classList.contains("custom-gallery")) ||
        (element.classList.contains("wp-block-group") &&
          element.classList.contains("is-nowrap"))
      ) {
        return { component: Gallery, props: { content: element.outerHTML } };
      }
      return { component: null, props: { content: element.outerHTML } };
    case "figure":
      return { component: ImageBlock, props: { content: element.outerHTML } };
    default:
      return { component: null, props: { content: element.outerHTML } };
  }
}

const contentElements = parseContent(content);
---

<div class="mx-auto max-w-5xl">
  <article class="wp-blocks prose max-w-none">
    <h1>{title}</h1>
    {
      contentElements.map((element, index) => {
        const { component: Component, props } = mapElementToComponent(element);
        return Component ? (
          <Component key={index} {...props} />
        ) : (
          <Fragment set:html={props.content} />
        );
      })
    }
  </article>
</div>
