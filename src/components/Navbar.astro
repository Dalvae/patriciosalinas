---
import type { Page, Lang } from "../types/types";
import { useTranslations } from "../i18n/utils";
import { languages } from "../i18n/ui";

export interface Props {
  currentPath: string;
  lang: Lang;
  pages: Page[];
}

const { currentPath, lang, pages } = Astro.props;
const t = useTranslations(lang);

function capitalizeFirstLetter(string: string): string {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function isCurrentItem(itemUri: string): boolean {
  return (
    currentPath === itemUri ||
    (currentPath === `/${lang}` && itemUri === `/${lang}`)
  );
}

function createNavStructure(pages: Page[]): any[] {
  const structure: any[] = [];
  pages.forEach((page) => {
    const parts = page.uri.split("/").filter(Boolean);
    let current = structure;
    parts.forEach((part, index) => {
      if (index !== 0) {
        const existing = current.find((item) => item.slug === part);
        if (existing) {
          current = existing.children;
        } else {
          const newItem = {
            slug: part,
            title: index === parts.length - 1 ? page.title : part,
            uri: page.uri,
            children: [],
          };
          current.push(newItem);
          current = newItem.children;
        }
      }
    });
  });
  return structure;
}

const navStructure = createNavStructure(
  pages.filter((page) => !page.isFrontPage)
);
---

<nav>
  <ul class="main-menu">
    <li>
      <a href={`/${lang}`} class:list={[{ active: isCurrentItem(`/${lang}`) }]}>
        {t("nav.home")}
      </a>
    </li>
    {
      navStructure.map((item) => (
        <li
          class:list={[
            { "has-dropdown": item.children && item.children.length > 0 },
          ]}
        >
          {item.children && item.children.length > 0 ? (
            <>
              <span class="dropdown-toggle">
                {capitalizeFirstLetter(item.title)}
              </span>
              <ul class="dropdown-menu">
                {item.children.map((child: any) => (
                  <li>
                    <a
                      href={child.uri}
                      class:list={[{ active: isCurrentItem(child.uri) }]}
                    >
                      {child.title}
                    </a>
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <a
              href={item.uri}
              class:list={[{ active: isCurrentItem(item.uri) }]}
            >
              {item.title}
            </a>
          )}
        </li>
      ))
    }
  </ul>
  <div class="language-switcher">
    {
      Object.entries(languages).map(([code, label]) => (
        <a href={`/${code}`} class:list={[{ active: lang === code }]}>
          {label}
        </a>
      ))
    }
  </div>
</nav>

<style>
  nav {
    background-color: #f8f9fa;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
  }
  .main-menu,
  .dropdown-menu {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }
  .main-menu {
    display: flex;
    gap: 1rem;
  }
  .main-menu > li {
    position: relative;
  }
  a,
  .dropdown-toggle {
    text-decoration: none;
    color: #333;
    font-weight: bold;
    cursor: pointer;
  }
  a:hover,
  a.active,
  .dropdown-toggle:hover {
    color: #007bff;
  }
  .has-dropdown:hover .dropdown-menu {
    display: block;
  }
  .dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .dropdown-menu li {
    padding: 0.5rem 1rem;
  }
  .language-switcher {
    display: flex;
    gap: 0.5rem;
  }
  .language-switcher a {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    background-color: #e9ecef;
  }
  .language-switcher a.active {
    background-color: #007bff;
    color: white;
  }
</style>
