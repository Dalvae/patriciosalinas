---
import {
  Astronav,
  MenuItems,
  MenuIcon,
  Dropdown,
  DropdownItems,
} from "astro-navbar";
import type { Page, Lang } from "../types/types";
import { useTranslations } from "../i18n/utils";
import { languages } from "../i18n/ui";
import { ChevronDown } from "lucide-react";

export interface Props {
  currentPath: string;
  lang: Lang;
  pages: Page[];
}

const { currentPath, lang, pages } = Astro.props;
const t = useTranslations(lang);

function isCurrentItem(itemUri: string): boolean {
  return (
    currentPath === itemUri ||
    (currentPath === `/${lang}` && itemUri === `/${lang}`)
  );
}

interface NavItem {
  slug: string;
  title: string;
  uri: string;
  children: NavItem[];
}

interface NavStructure {
  structure: NavItem[];
  bioItem: NavItem | null;
}

function createNavStructure(pages: Page[], lang: Lang): NavStructure {
  const structure: NavItem[] = [];
  const orderMap = {
    es: [
      "proyectos",
      "galeria",
      "exposiciones",
      "publicaciones",
      "videos",
      "prensa",
      "bio",
    ],
    en: [
      "projects",
      "gallery",
      "exhibitions",
      "publications",
      "videos-2",
      "press",
      "bio-2",
    ],
    sv: [
      "projekt",
      "galleri",
      "utstallningar",
      "publikationer",
      "videor",
      "pressbevakning",
      "bio-3",
    ],
  };

  // Create a map of slugs to NavItems
  const slugMap: { [key: string]: NavItem } = {};

  pages.forEach((page) => {
    const parts = page.uri.split("/").filter(Boolean);
    if (parts.length > 1) {
      // Skip the language part
      const topLevelSlug = parts[1];
      const isSubPage = parts.length > 2;

      if (!slugMap[topLevelSlug]) {
        // Find the correct title for top-level items
        const topLevelTitle = orderMap[lang as keyof typeof orderMap].includes(
          topLevelSlug
        )
          ? page.title
          : topLevelSlug.charAt(0).toUpperCase() + topLevelSlug.slice(1);

        slugMap[topLevelSlug] = {
          slug: topLevelSlug,
          title: topLevelTitle,
          uri: `/${parts.slice(0, 2).join("/")}`,
          children: [],
        };
      }

      if (isSubPage) {
        slugMap[topLevelSlug].children.push({
          slug: parts[parts.length - 1],
          title: page.title,
          uri: page.uri,
          children: [],
        });
      } else if (page.title !== slugMap[topLevelSlug].title) {
        // Update the title of the top-level item if it's a direct page (not a parent of subpages)
        slugMap[topLevelSlug].title = page.title;
      }
    }
  });

  // Order the items according to the orderMap
  orderMap[lang as keyof typeof orderMap].forEach((slug) => {
    if (slugMap[slug]) {
      structure.push(slugMap[slug]);
    }
  });

  // Handle projects/proyectos/projekt separately
  const projectSlugs = { es: "proyectos", en: "projects", sv: "projekt" };
  const projectSlug = projectSlugs[lang as keyof typeof projectSlugs];
  const projectsItem = structure.find((item) => item.slug === projectSlug);

  if (projectsItem && projectsItem.children) {
    // Sort children of projects
    projectsItem.children.sort((a, b) => {
      if (a.slug === "atacama" || a.slug === "atacama-2") return -1;
      if (b.slug === "atacama" || b.slug === "atacama-2") return 1;
      if (a.slug === "walter-benjamin") return -1;
      if (b.slug === "walter-benjamin") return 1;
      return 0;
    });
  }

  return { structure, bioItem: null };
}

const { structure: navStructure, bioItem } = createNavStructure(
  pages.filter((page) => !page.isFrontPage),
  lang
);
---

<Astronav>
  <div
    class="flex flex-col md:flex-row md:items-center md:justify-between pt-4 pb-1 lg:pr-6 lg:pl-12 px-6 min-h-20 nav"
  >
    <div class="flex flex-col items-start">
      <div class="flex justify-between items-center w-full md:w-auto">
        <a
          href={`/${lang}`}
          class="font-bold tracking-widest text-xl text-black hover:text-gray-800"
        >
          PATRICIO SALINAS A
        </a>
        <div class="md:hidden">
          <MenuIcon class="w-6 h-6 text-gray-800" />
        </div>
      </div>
      <span class="md:hidden lg:block text-sm text-gray-600"
        >{t("nav.subtitle")}</span
      >
    </div>
    <MenuItems class="hidden md:flex md:items-center mt-4 md:mt-0">
      <ul class="flex flex-col md:flex-row md:space-x-3">
        {
          navStructure.map((item: NavItem) => (
            <li class="relative group py-2 md:py-0">
              {item.children && item.children.length > 0 ? (
                <Dropdown class="group">
                  <button class="flex items-center uppercase text-neutral-800 hover:text-neutral-950">
                    {item.title}
                    <span class="chevron-icon ml-1 group-open:rotate-180">
                      <ChevronDown className="w-4 h-4" />
                    </span>
                  </button>
                  <DropdownItems>
                    <ul class="bg-white md:border md:border-gray-200 md:shadow-lg md:absolute left-0 mt-2 w-48 z-50">
                      {item.children.map((child: NavItem) => (
                        <li>
                          <a
                            href={child.uri}
                            class={`block px-4 py-2 text-sm ${
                              isCurrentItem(child.uri)
                                ? "text-black active-item"
                                : "text-neutral-800 hover:text-neutral-950"
                            }`}
                          >
                            {child.title}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </DropdownItems>
                </Dropdown>
              ) : (
                <a
                  href={item.uri}
                  class={`block uppercase ${
                    isCurrentItem(item.uri)
                      ? "text-black active-item"
                      : "text-neutral-800 hover:text-neutral-950"
                  }`}
                >
                  {item.title}
                </a>
              )}
            </li>
          ))
        }
        {
          bioItem && (
            <li class="relative group py-2 md:py-0">
              <a
                href={bioItem.uri}
                class={`block uppercase ${
                  isCurrentItem(bioItem.uri)
                    ? "text-black active-item"
                    : "text-neutral-800 hover:text-neutral-950"
                }`}
              >
                {bioItem.title}
              </a>
            </li>
          )
        }
      </ul>
      <Dropdown class="group ml-0 md:ml-6 mt-2 md:mt-0">
        <button
          class="flex items-center text-neutral-800 hover:text-neutral-950 italic border border-dashed border-gray-700 px-2 py-1 rounded"
        >
          {lang.toUpperCase()}
          <span class="chevron-icon ml-1 group-open:rotate-180">
            <ChevronDown className="w-4 h-4" />
          </span>
        </button>
        <DropdownItems>
          <ul
            class="bg-white md:border border-gray-200 rounded md:shadow-lg mt-2 w-full md:w-32 md:absolute md:right-0 z-50"
          >
            {
              Object.entries(languages).map(([code, label]) => (
                <li>
                  <a
                    href={`/${code}`}
                    class={`block px-4 py-2 text-sm italic tracking-tight ${
                      lang === code
                        ? "text-black active-item"
                        : "text-gray-600 hover:text-black"
                    }`}
                  >
                    {code.toUpperCase()}
                  </a>
                </li>
              ))
            }
          </ul>
        </DropdownItems>
      </Dropdown>
    </MenuItems>
  </div>
</Astronav>

<style>
  nav {
    font-family: "Playfair Display", serif;
  }
  nav > a {
    font-weight: 600;
  }
  .dropdown-menu.show,
  .mobile-dropdown-menu.show {
    display: block;
  }
  .active-item {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
</style>
