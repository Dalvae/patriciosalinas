---
import ProtectedImage from "./ui/ReactProtrectedImage";
import type { Lang } from "../types/types";

interface Project {
  title: string;
  images: string[];
  link: string;
}

interface Props {
  content: string;
  projects: Project[];
  lang: Lang;
}

const { content, projects, lang } = Astro.props;

function splitIntoParagraphs(html: string): string[] {
  return html
    .split("</p>")
    .map((p) => p.trim())
    .filter((p) => p)
    .map((p) => p + "</p>");
}

const filteredProjects = projects.filter(
  (project) =>
    project.title === "Walter Benjamin" || project.title === "Atacama"
);

const orderedProjects = filteredProjects.sort((a, b) =>
  a.title === "Walter Benjamin" ? -1 : 1
);

const paragraphs = splitIntoParagraphs(content).slice(0, 4); // Limitar a 4 párrafos
---

<div
  class="w-full h-full overflow-y-auto snap-y snap-mandatory"
  id="main-container"
>
  {
    paragraphs.map((paragraph, index) => (
      <section class="relative w-full h-full snap-start" data-index={index}>
        <div class="absolute inset-0 bg-image-placeholder" />
        <div class="absolute inset-0 flex items-center justify-start">
          <div class="bg-white border-4 border-black border-double p-8 max-w-md w-full m-6 md:m-12 max-h-[80vh] overflow-y-auto shadow-lg">
            <div class="text-justify word-fade-animation-container">
              <div class="word-fade-animation" set:html={paragraph} />
            </div>
          </div>
        </div>
      </section>
    ))
  }
</div>

<script define:vars={{ orderedProjects }}>
  function adjustMainContainerHeight() {
    const navbar = document.querySelector("nav");
    const footer = document.querySelector("footer");
    const mainContainer = document.getElementById("main-container");

    if (navbar && footer && mainContainer) {
      const navbarHeight = navbar.offsetHeight;
      const footerHeight = footer.offsetHeight;
      const windowHeight = window.innerHeight;

      const newHeight = windowHeight - navbarHeight - footerHeight;
      mainContainer.style.height = `${newHeight}px`;

      const sections = mainContainer.querySelectorAll("section");
      sections.forEach((section) => {
        section.style.height = `${newHeight}px`;
      });
    }
  }

  function getImageDimensions(url) {
    if (!url.includes("cloudinary.com")) {
      console.warn(`Skipping non-Cloudinary image: ${url}`);
      return null;
    }

    const match = url.match(/w_(\d+),h_(\d+)/);
    if (match) {
      const width = parseInt(match[1]);
      const height = parseInt(match[2]);
      return { width, height, aspectRatio: width / height };
    }

    console.warn(`Could not parse dimensions from URL: ${url}`);
    return null;
  }

  function selectOptimalImages() {
    const container = document.getElementById("main-container");
    const containerAspectRatio = container.clientWidth / container.clientHeight;
    console.log(`Container aspect ratio: ${containerAspectRatio.toFixed(2)}`);

    const aspectRatioRange = 0.5; // Rango de tolerancia

    const projectImages = orderedProjects.map((project) =>
      project.images
        .map((url) => {
          const dimensions = getImageDimensions(url);
          return dimensions
            ? { url, ...dimensions, project: project.title }
            : null;
        })
        .filter((img) => img !== null)
        .filter((img) => {
          const lowerBound = containerAspectRatio - aspectRatioRange;
          const upperBound = containerAspectRatio + aspectRatioRange;
          return img.aspectRatio >= lowerBound && img.aspectRatio <= upperBound;
        })
    );

    function getRandomImages(images, count) {
      const shuffled = [...images].sort(() => 0.5 - Math.random());
      return shuffled.slice(0, count);
    }

    const walterBenjaminImages = getRandomImages(projectImages[0], 2);
    const atacamaImages = getRandomImages(projectImages[1], 2);

    const selectedImages = [...walterBenjaminImages, ...atacamaImages];

    console.log("Selected images:", selectedImages);

    return selectedImages;
  }
  function applyImageToSection(section, imageUrl) {
    const imgElement = section.querySelector(".bg-image-placeholder");
    imgElement.style.backgroundImage = `url(${imageUrl})`;
    imgElement.style.backgroundSize = "cover";
    imgElement.style.backgroundPosition = "center";
  }

  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const target = entry.target;
        setTimeout(() => {
          target.querySelector(".word-fade-animation").classList.add("fade-in");
        }, 100);
        observer.unobserve(target);
      }
    });
  }

  function applyImagesToSections() {
    const optimalImages = selectOptimalImages();
    console.log("Final selected images:", optimalImages);

    const sections = document.querySelectorAll("section");
    sections.forEach((section, index) => {
      if (index < optimalImages.length) {
        applyImageToSection(section, optimalImages[index].url);
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    adjustMainContainerHeight();
    applyImagesToSections();

    const observer = new IntersectionObserver(handleIntersection, {
      threshold: 0.1,
    });

    document.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });

    // Recalcular las alturas y las imágenes óptimas cuando se redimensiona la ventana
    let resizeTimer;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        adjustMainContainerHeight();
        applyImagesToSections();
      }, 250);
    });
  });
</script>

<style>
  .word-fade-animation-container {
    position: relative;
    overflow: hidden;
  }

  .word-fade-animation {
    opacity: 1;
    display: inline-block;
    mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 0%,
      rgba(0, 0, 0, 1) 10%,
      rgba(0, 0, 0, 0) 90%,
      rgba(0, 0, 0, 0) 100%
    );
    -webkit-mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 0%,
      rgba(0, 0, 0, 1) 10%,
      rgba(0, 0, 0, 0) 90%,
      rgba(0, 0, 0, 0) 100%
    );
    mask-size: 100% 400%;
    -webkit-mask-size: 100% 400%;
    mask-position: 0 100%;
    -webkit-mask-position: 0 100%;
    transition:
      mask-position 1.5s ease-in-out,
      -webkit-mask-position 1.5s ease-in-out;
  }

  .word-fade-animation.fade-in {
    mask-position: 0 0;
    -webkit-mask-position: 0 0;
  }

  .bg-image-placeholder {
    transition: background-image 0.5s ease-in-out;
  }
</style>
