---
import { Image } from "astro:assets";
import { Maximize2, ChevronLeft, ChevronRight, X } from "lucide-react";

interface ImageInfo {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  caption?: string;
}

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  allImages: ImageInfo[];
  className?: string;
  containerClassName?: string;
  caption?: string;
  style?: Record<string, string>;
}

const {
  src,
  alt,
  width,
  height,
  allImages,
  className = "",
  containerClassName = "",
  caption,
  style = {},
} = Astro.props;

function isRemoteImage(src: string): boolean {
  return src.startsWith("http://") || src.startsWith("https://");
}

let imageAttributes: any = { src, alt, width, height };

if (isRemoteImage(src)) {
  imageAttributes.inferSize = true;
}

const combinedStyle = {
  width: width ? `${width}px` : "auto",
  height: height ? `${height}px` : "auto",
  objectFit: "contain",
  ...style,
};
---

<div
  class={`protected-image-container relative overflow-hidden cursor-pointer ${containerClassName}`}
  data-all-images={JSON.stringify(allImages)}
  style={`width: ${combinedStyle.width}; height: ${combinedStyle.height};`}
>
  <Image
    {...imageAttributes}
    class={`max-w-full h-auto block ${className}`}
    style={combinedStyle}
  />
  <div
    class="absolute bottom-0 right-0 p-2 text-white text-sm bg-black bg-opacity-50"
  >
    Â© Patricio Salinas A
  </div>
  <div
    class="image-overlay absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 flex flex-col items-start justify-between opacity-0 hover:opacity-100 transition-opacity duration-300"
  >
    <div class="text-white m-2 self-end">
      <Maximize2 className="h-6 w-6" />
    </div>
    {
      caption && (
        <div class="text-white ml-2 w-full font-bold bg-opacity-50 p-2">
          <div set:html={caption} />
        </div>
      )
    }
  </div>
</div>

<div
  id="imageModal"
  class="image-modal fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-90"
>
  <div
    class="modal-content relative w-full h-full flex items-center justify-center"
  >
    <button
      id="closeModal"
      class="absolute top-4 right-4 text-white bg-black bg-opacity-50 p-2 rounded-full z-10"
    >
      <X className="h-6 w-6" />
    </button>
    <button
      id="prevImage"
      class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 p-2 rounded-full z-10"
    >
      <ChevronLeft className="h-6 w-6" />
    </button>
    <div class="flex flex-col items-center max-w-[90vw] max-h-[90vh]">
      <img
        id="modalImage"
        class="max-w-full max-h-[80vh] object-contain"
        src=""
        alt=""
      />
      <div
        id="modalCaption"
        class="mt-4 text-white text-lg font-bold text-center max-w-[80vw]"
      >
      </div>
    </div>
    <button
      id="nextImage"
      class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 p-2 rounded-full z-10"
    >
      <ChevronRight className="h-6 w-6" />
    </button>
  </div>
</div>

<script>
  interface ImageInfo {
    src: string;
    alt: string;
    width?: number;
    height?: number;
    caption?: string;
  }

  function setupProtectedImages() {
    const containers = document.querySelectorAll<HTMLElement>(
      ".protected-image-container"
    );
    const modal = document.getElementById("imageModal") as HTMLDivElement;
    const modalImage = document.getElementById(
      "modalImage"
    ) as HTMLImageElement;
    const modalCaption = document.getElementById("modalCaption");
    const closeButton = document.getElementById("closeModal");
    const prevButton = document.getElementById("prevImage");
    const nextButton = document.getElementById("nextImage");
    let currentImageIndex = 0;
    let allImages: ImageInfo[] = [];

    containers.forEach((container) => {
      container.addEventListener("click", () => {
        const dataAllImages = container.dataset.allImages;
        if (dataAllImages) {
          allImages = JSON.parse(dataAllImages);
          const containerImage = container.querySelector("img");
          currentImageIndex = allImages.findIndex(
            (img) => img.src === (containerImage?.src ?? "")
          );
          openModal();
        }
      });
    });

    function openModal() {
      if (modal) {
        modal.style.display = "flex";
        updateModalContent();
      }
    }

    function closeModal() {
      if (modal) modal.style.display = "none";
    }

    function updateModalContent() {
      const currentImage = allImages[currentImageIndex];
      if (currentImage) {
        modalImage.src = currentImage.src;
        modalImage.alt = currentImage.alt;
        if (modalCaption) {
          modalCaption.innerHTML = currentImage.caption || "";
        }
      }
    }

    function changeImage(direction: number) {
      currentImageIndex =
        (currentImageIndex + direction + allImages.length) % allImages.length;
      updateModalContent();
    }

    closeButton?.addEventListener("click", closeModal);
    prevButton?.addEventListener("click", () => changeImage(-1));
    nextButton?.addEventListener("click", () => changeImage(1));

    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") closeModal();
      if (e.key === "ArrowLeft") changeImage(-1);
      if (e.key === "ArrowRight") changeImage(1);
    });
  }

  document.addEventListener("astro:page-load", setupProtectedImages);
</script>

<style>
  .protected-image-container {
    position: relative;
    overflow: hidden;
    cursor: pointer;
  }
  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: space-between;
    opacity: 0;
    transition: opacity 0.3s;
  }
  .protected-image-container:hover .image-overlay {
    opacity: 1;
  }
  .image-modal {
    transition: opacity 0.3s ease-in-out;
  }
</style>
