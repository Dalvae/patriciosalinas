---
import ParsedImage from "./ParsedImage.astro";
import { JSDOM } from "jsdom";

interface Props {
  content: string;
}

interface SingleImageItem {
  type: "single";
  imageHtml: string;
  caption: string | null;
}

interface GroupImageItem {
  type: "group";
  images: {
    imageHtml: string;
    caption: string | null;
  }[];
}

type GalleryItem = SingleImageItem | GroupImageItem;

const { content } = Astro.props;

function parseGalleryContent(content: string): GalleryItem[] {
  const dom = new JSDOM(content);
  const doc = dom.window.document;

  // Buscar columnas (estructura actual)
  const columns = doc.querySelectorAll(".wp-block-column");
  if (columns.length > 0) {
    return Array.from(columns).map((column): SingleImageItem => {
      const img = column.querySelector("img");
      const caption = column.querySelector("p.has-text-align-center");
      return {
        type: "single",
        imageHtml: img ? img.outerHTML : "",
        caption: caption ? caption.textContent : null,
      };
    });
  }

  // Buscar grupos de imágenes
  const galleryFigure = doc.querySelector("figure.wp-block-gallery");
  if (galleryFigure) {
    const images = galleryFigure.querySelectorAll("img");
    return [
      {
        type: "group",
        images: Array.from(images).map((img) => ({
          imageHtml: img.outerHTML,
          caption: null, // Puedes ajustar esto si las imágenes en grupo tienen captions
        })),
      },
    ];
  }

  // Si no se encuentra ninguna estructura conocida, buscar imágenes individuales
  const singleImages = doc.querySelectorAll("figure.wp-block-image");
  return Array.from(singleImages).map((figure): SingleImageItem => {
    const img = figure.querySelector("img");
    const figcaption = figure.querySelector("figcaption");
    return {
      type: "single",
      imageHtml: img ? img.outerHTML : "",
      caption: figcaption ? figcaption.textContent : null,
    };
  });
}

const galleryItems = parseGalleryContent(content);
---

<div class="gallery">
  {
    galleryItems.map((item) =>
      item.type === "single" ? (
        <div class="gallery-item">
          <ParsedImage content={item.imageHtml} />
          {item.caption && <p class="caption">{item.caption}</p>}
        </div>
      ) : (
        <div class="gallery-group">
          {item.images.map((image) => (
            <div class="gallery-item">
              <ParsedImage content={image.imageHtml} />
              {image.caption && <p class="caption">{image.caption}</p>}
            </div>
          ))}
        </div>
      )
    )
  }
</div>

<style>
  .gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }
  .gallery-item {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .gallery-group {
    grid-column: 1 / -1;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
  }
  .gallery-group .gallery-item {
    flex: 1;
    min-width: 200px;
    max-width: calc(50% - 0.5rem);
  }
  .caption {
    margin-top: 0.5rem;
    text-align: center;
  }
</style>
